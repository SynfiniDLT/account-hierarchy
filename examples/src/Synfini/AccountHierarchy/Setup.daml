{-# LANGUAGE ApplicativeDo #-}

module Synfini.AccountHierarchy.Setup where

import DA.Finance.Asset
import DA.Finance.Asset.Lifecycle
import DA.Finance.Asset.Settlement
import DA.Finance.Trade.Dvp
import DA.Finance.Trade.SettlementInstruction
import DA.Finance.Types
import qualified DA.Set as Set
import Daml.Script
import Synfini.AccountHierarchy.Allocation
import Synfini.AccountHierarchy.Lifecycle
import Synfini.AccountHierarchy.Service
import Synfini.AccountHierarchy.Trade

import qualified DA.Optional as O
import Synfini.Trigger.AccountHierarchy.Allocation

setup : Script ()
setup = do
  let morley = O.fromSome $ partyFromText "Morley Corporation"
  let csd = O.fromSome $ partyFromText "Central Securities Depository"
  let acme = O.fromSome $ partyFromText "Acme Custodian"
  let ajax = O.fromSome $ partyFromText "Ajax Custodian"
  let alice = O.fromSome $ partyFromText "Alice"

  let
    morleyId = Id with signatories = Set.fromList [morley], label = "MLY Class A Shares", version = 0
    morleyStock = Asset with id = morleyId, quantity = 50.0

    acmeAccountId = Id with signatories = Set.fromList [csd], label = "Acme@CSD", version = 0
    acmeAccount = Account with id = acmeAccountId, provider = csd, owner = acme
    acmeDeposit = AssetDeposit with account = acmeAccount, asset = morleyStock, observers = Set.empty
    acmeCustodianRole = CustodianRole with account = acmeAccount, observers = Set.empty

    ajaxAccountId = Id with signatories = Set.fromList [acme], label = "Ajax@Acme", version = 0
    ajaxAccount = Account with id = ajaxAccountId, provider = acme, owner = ajax
    ajaxDeposit = AssetDeposit with account = ajaxAccount, asset = morleyStock, observers = Set.empty
    ajaxCustodianRole = CustodianRole with account = ajaxAccount, observers = Set.empty

    aliceAccountId = Id with signatories = Set.fromList [ajax], label = "Alice@Ajax", version = 0
    aliceAccount = Account with id = aliceAccountId, provider = ajax, owner = alice
    aliceDeposit = AssetDeposit with account = aliceAccount, asset = morleyStock, observers = Set.empty

    allocationAgreementId = Id with signatories = Set.fromList [csd], label = "Allocation triggered by CSD", version = 0
    allocationAgreement = MasterAgreement with id = allocationAgreementId, party1 = csd, party2 = alice
    allocationToAjax = AllocationDetails with account = ajaxAccount, confirmed = False
    allocationToAlice = AllocationDetails with account = aliceAccount, confirmed = False
    allocationTradeId = Id with signatories = Set.fromList [acme], label = "Alice@Ajax +50 Morley", version = 0

  acmeCustodianRoleCid <- submit csd do createCmd acmeCustodianRole
  ajaxCustodianRoleCid <- submit acme do createCmd ajaxCustodianRole
  submit csd do
    createCmd AllocationChangeRule with account = acmeAccount

  ajaxCustServiceRequestCid <- submit ajax do createCmd CustodyServiceRequest with account = ajaxAccount, parent = acmeAccount
  ajaxCustServiceCid <- submit acme do
    exerciseCmd acmeCustodianRoleCid CustodianRole_AcceptServiceRequest with serviceRequestCid = ajaxCustServiceRequestCid
  submit ajax do
    exerciseCmd ajaxCustServiceCid CustodyService_SetObservers with newObservers = Set.fromList [csd]
  submit acme do
    createCmd AllocationChangeRule with account = ajaxAccount

  aliceCustServiceRequestCid <- submit alice do createCmd CustodyServiceRequest with account = aliceAccount, parent = ajaxAccount
  aliceCustServiceCid <- submit ajax do
    exerciseCmd ajaxCustodianRoleCid CustodianRole_AcceptServiceRequest with serviceRequestCid = aliceCustServiceRequestCid
  submit alice do
    exerciseCmd aliceCustServiceCid CustodyService_SetObservers with newObservers = Set.fromList [csd]
  submit ajax do
    createCmd AllocationChangeRule with account = aliceAccount

  submit csd do
    createCmd AllocationChangeInstruction with
      asset = morleyStock
      masterAgreement = allocationAgreement
      tradeId = allocationTradeId
      deallocations = []
      allocations = [allocationToAjax, allocationToAlice]
      observers = Set.empty
  -- let allocationKey = (allocationAgreementId, allocationTradeId, morleyId)
  -- submit acme do
  --   exerciseByKeyCmd @AllocationChangeInstruction allocationKey AllocationChangeInstruction_ConfirmNextAllocation
  -- submit ajax do
  --   exerciseByKeyCmd @AllocationChangeInstruction allocationKey AllocationChangeInstruction_ConfirmNextAllocation
  -- submit csd do
  --   createCmd acmeDeposit
  --   exerciseByKeyCmd @AllocationChangeInstruction allocationKey AllocationChangeInstruction_Process
  let deallocationFromAjax = DeallocationDetails with
        depositCid = None
        account = ajaxAccount
      deallocationFromAlice = DeallocationDetails with
        depositCid = None
        account = aliceAccount
      deallocationAgreement = allocationAgreement with id.label = "De-allocation triggered by CSD"
  submit csd do
    createCmd AllocationChangeInstruction with
      asset = morleyStock with quantity = 10.0
      masterAgreement = deallocationAgreement
      tradeId = allocationTradeId with label = "Alice@Ajax -10 Morley"
      deallocations = [deallocationFromAlice, deallocationFromAjax]
      allocations = []
      observers = Set.empty
  submit acme do
    createCmd $ AllocationChangeRuleTrigger acme
  submit ajax do
    createCmd $ AllocationChangeRuleTrigger ajax
  submit alice do
    createCmd $ AllocationChangeRuleTrigger alice
  pure ()

test : Script ()
test = do
  let csd = O.fromSome $ partyFromText "Central Securities Depository"
  [(allocationChangeInstructionCid, _)] <- query @AllocationChangeInstruction csd
  submit csd do exerciseCmd allocationChangeInstructionCid AllocationChangeInstruction_Process
  pure ()